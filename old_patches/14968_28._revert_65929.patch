diff --git a/ext/socket/init.c b/ext/socket/init.c
index 9742dddec2..ba4b084837 100644
--- a/ext/socket/init.c
+++ b/ext/socket/init.c
@@ -466,9 +466,7 @@ rsock_socket0(int domain, int type, int proto)
         return -1;
 fix_cloexec:
     rb_maygvl_fd_fix_cloexec(ret);
-    if (RSOCK_NONBLOCK_DEFAULT) {
-        rsock_make_fd_nonblock(ret);
-    }
+    rsock_make_fd_nonblock(ret);
 update_max_fd:
     rb_update_max_fd(ret);
 
@@ -483,9 +481,7 @@ rsock_socket0(int domain, int type, int proto)
     if (ret == -1)
         return -1;
     rb_fd_fix_cloexec(ret);
-    if (RSOCK_NONBLOCK_DEFAULT) {
-        rsock_make_fd_nonblock(ret);
-    }
+    rsock_make_fd_nonblock(ret);
 
     return ret;
 }
@@ -665,9 +661,7 @@ cloexec_accept(int socket, struct sockaddr *address, socklen_t *address_len,
 #ifdef HAVE_ACCEPT4
     static int try_accept4 = 1;
 #endif
-    if (RSOCK_NONBLOCK_DEFAULT) {
-        nonblock = 1;
-    }
+    nonblock = 1; /* TODO remove parameter */
     if (address_len) len0 = *address_len;
 #ifdef HAVE_ACCEPT4
     if (try_accept4) {
diff --git a/ext/socket/rubysocket.h b/ext/socket/rubysocket.h
index 723f09a17c..bccea8732f 100644
--- a/ext/socket/rubysocket.h
+++ b/ext/socket/rubysocket.h
@@ -26,13 +26,7 @@
 #  if defined(_MSC_VER)
 #    undef HAVE_TYPE_STRUCT_SOCKADDR_DL
 #  endif
-/*
- * FIXME: failures if we make nonblocking the default
- * [ruby-core:89973] [ruby-core:89976] [ruby-core:89977] [Bug #14968]
- */
-#  define RSOCK_NONBLOCK_DEFAULT (0)
 #else
-#  define RSOCK_NONBLOCK_DEFAULT (1)
 #  include <sys/socket.h>
 #  include <netinet/in.h>
 #  ifdef HAVE_NETINET_IN_SYSTM_H
diff --git a/ext/socket/socket.c b/ext/socket/socket.c
index b6bda8fee8..ad2ca5fc67 100644
--- a/ext/socket/socket.c
+++ b/ext/socket/socket.c
@@ -213,10 +213,8 @@ rsock_socketpair0(int domain, int type, int protocol, int sv[2])
 fix_cloexec:
     rb_maygvl_fd_fix_cloexec(sv[0]);
     rb_maygvl_fd_fix_cloexec(sv[1]);
-    if (RSOCK_NONBLOCK_DEFAULT) {
-        rsock_make_fd_nonblock(sv[0]);
-        rsock_make_fd_nonblock(sv[1]);
-    }
+    rsock_make_fd_nonblock(sv[0]);
+    rsock_make_fd_nonblock(sv[1]);
 
 update_max_fd:
     rb_update_max_fd(sv[0]);
@@ -235,10 +233,8 @@ rsock_socketpair0(int domain, int type, int protocol, int sv[2])
 
     rb_fd_fix_cloexec(sv[0]);
     rb_fd_fix_cloexec(sv[1]);
-    if (RSOCK_NONBLOCK_DEFAULT) {
-        rsock_make_fd_nonblock(sv[0]);
-        rsock_make_fd_nonblock(sv[1]);
-    }
+    rsock_make_fd_nonblock(sv[0]);
+    rsock_make_fd_nonblock(sv[1]);
     return ret;
 }
 #endif /* !SOCK_CLOEXEC */
