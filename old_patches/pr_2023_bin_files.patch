From c16f4d0a91168703766fdd973947ba3c68b67a26 Mon Sep 17 00:00:00 2001
From: SHIBATA Hiroshi <hsbt@ruby-lang.org>
Date: Fri, 23 Nov 2018 10:45:51 +0900
Subject: [PATCH] Use generated bin file by rubygems. It caused to conflict
 `rdoc` executable when users invoke `gem i rdoc` in their environment.

---
 bin/bundle          | 46 +++++++++++++--------------
 bin/bundle_ruby     | 77 +++++++++++++--------------------------------
 bin/bundler         | 27 ++++++++++++++--
 bin/irb             | 28 +++++++++++++----
 bin/rdoc            | 53 +++++++++++--------------------
 bin/ri              | 31 +++++++++++++-----
 common.mk           |  6 ++--
 lib/bundler.gemspec |  4 +--
 libexec/bundle      | 31 ++++++++++++++++++
 libexec/bundle_ruby | 60 +++++++++++++++++++++++++++++++++++
 libexec/bundler     |  4 +++
 libexec/irb         | 11 +++++++
 libexec/rdoc        | 44 ++++++++++++++++++++++++++
 libexec/ri          | 12 +++++++
 tool/rbinstall.rb   |  2 +-
 15 files changed, 299 insertions(+), 137 deletions(-)
 create mode 100755 libexec/bundle
 create mode 100755 libexec/bundle_ruby
 create mode 100755 libexec/bundler
 create mode 100755 libexec/irb
 create mode 100755 libexec/rdoc
 create mode 100755 libexec/ri

diff --git a/bin/bundle b/bin/bundle
index aaf773745d36..59dad21c603e 100755
--- a/bin/bundle
+++ b/bin/bundle
@@ -1,31 +1,27 @@
 #!/usr/bin/env ruby
-# frozen_string_literal: true
+#
+# This file was generated by RubyGems.
+#
+# The application 'bundler' is installed as part of a gem, and
+# this file is here to facilitate running it.
+#
 
-# Exit cleanly from an early interrupt
-Signal.trap("INT") do
-  Bundler.ui.debug("\n#{caller.join("\n")}") if defined?(Bundler)
-  exit 1
-end
-
-require "bundler"
-# Check if an older version of bundler is installed
-$LOAD_PATH.each do |path|
-  next unless path =~ %r{/bundler-0\.(\d+)} && $1.to_i < 9
-  err = String.new
-  err << "Looks like you have a version of bundler that's older than 0.9.\n"
-  err << "Please remove your old versions.\n"
-  err << "An easy way to do this is by running `gem cleanup bundler`."
-  abort(err)
-end
+require 'rubygems'
 
-require "bundler/friendly_errors"
-Bundler.with_friendly_errors do
-  require "bundler/cli"
+version = ">= 0.a"
 
-  # Allow any command to use --help flag to show help for that command
-  help_flags = %w[--help -h]
-  help_flag_used = ARGV.any? {|a| help_flags.include? a }
-  args = help_flag_used ? Bundler::CLI.reformatted_help_args(ARGV) : ARGV
+if ARGV.first
+  str = ARGV.first
+  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
+  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
+    version = $1
+    ARGV.shift
+  end
+end
 
-  Bundler::CLI.start(args, :debug => true)
+if Gem.respond_to?(:activate_bin_path)
+load Gem.activate_bin_path('bundler', 'bundle', version)
+else
+gem "bundler", version
+load Gem.bin_path("bundler", "bundle", version)
 end
diff --git a/bin/bundle_ruby b/bin/bundle_ruby
index 2209c6195f8c..be7fb5afe496 100755
--- a/bin/bundle_ruby
+++ b/bin/bundle_ruby
@@ -1,60 +1,27 @@
 #!/usr/bin/env ruby
-# frozen_string_literal: true
-
-require "bundler/shared_helpers"
-
-Bundler::SharedHelpers.major_deprecation(3, "the bundle_ruby executable has been removed in favor of `bundle platform --ruby`")
-
-Signal.trap("INT") { exit 1 }
-
-require "bundler/errors"
-require "bundler/ruby_version"
-require "bundler/ruby_dsl"
-
-module Bundler
-  class Dsl
-    include RubyDsl
-
-    attr_accessor :ruby_version
-
-    def initialize
-      @ruby_version = nil
-    end
-
-    def eval_gemfile(gemfile, contents = nil)
-      contents ||= File.open(gemfile, "rb", &:read)
-      instance_eval(contents, gemfile.to_s, 1)
-    rescue SyntaxError => e
-      bt = e.message.split("\n")[1..-1]
-      raise GemfileError, ["Gemfile syntax error:", *bt].join("\n")
-    rescue ScriptError, RegexpError, NameError, ArgumentError => e
-      e.backtrace[0] = "#{e.backtrace[0]}: #{e.message} (#{e.class})"
-      STDERR.puts e.backtrace.join("\n       ")
-      raise GemfileError, "There was an error in your Gemfile," \
-        " and Bundler cannot continue."
-    end
-
-    def source(source, options = {})
-    end
-
-    def gem(name, *args)
-    end
-
-    def group(*args)
-    end
+#
+# This file was generated by RubyGems.
+#
+# The application 'bundler' is installed as part of a gem, and
+# this file is here to facilitate running it.
+#
+
+require 'rubygems'
+
+version = ">= 0.a"
+
+if ARGV.first
+  str = ARGV.first
+  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
+  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
+    version = $1
+    ARGV.shift
   end
 end
 
-dsl = Bundler::Dsl.new
-begin
-  dsl.eval_gemfile(Bundler::SharedHelpers.default_gemfile)
-  ruby_version = dsl.ruby_version
-  if ruby_version
-    puts ruby_version
-  else
-    puts "No ruby version specified"
-  end
-rescue Bundler::GemfileError => e
-  puts e.message
-  exit(-1)
+if Gem.respond_to?(:activate_bin_path)
+load Gem.activate_bin_path('bundler', 'bundle_ruby', version)
+else
+gem "bundler", version
+load Gem.bin_path("bundler", "bundle_ruby", version)
 end
diff --git a/bin/bundler b/bin/bundler
index d9131fe834b8..7ef736899d1b 100755
--- a/bin/bundler
+++ b/bin/bundler
@@ -1,4 +1,27 @@
 #!/usr/bin/env ruby
-# frozen_string_literal: true
+#
+# This file was generated by RubyGems.
+#
+# The application 'bundler' is installed as part of a gem, and
+# this file is here to facilitate running it.
+#
 
-load File.expand_path("../bundle", __FILE__)
+require 'rubygems'
+
+version = ">= 0.a"
+
+if ARGV.first
+  str = ARGV.first
+  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
+  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
+    version = $1
+    ARGV.shift
+  end
+end
+
+if Gem.respond_to?(:activate_bin_path)
+load Gem.activate_bin_path('bundler', 'bundler', version)
+else
+gem "bundler", version
+load Gem.bin_path("bundler", "bundler", version)
+end
diff --git a/bin/irb b/bin/irb
index c64ee85fbdcd..e44609a1b0f5 100755
--- a/bin/irb
+++ b/bin/irb
@@ -1,11 +1,27 @@
 #!/usr/bin/env ruby
 #
-#   irb.rb - interactive ruby
-#   	$Release Version: 0.9.6 $
-#   	$Revision$
-#   	by Keiju ISHITSUKA(keiju@ruby-lang.org)
+# This file was generated by RubyGems.
 #
+# The application 'irb' is installed as part of a gem, and
+# this file is here to facilitate running it.
+#
+
+require 'rubygems'
+
+version = ">= 0.a"
 
-require "irb"
+if ARGV.first
+  str = ARGV.first
+  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
+  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
+    version = $1
+    ARGV.shift
+  end
+end
 
-IRB.start(__FILE__)
+if Gem.respond_to?(:activate_bin_path)
+load Gem.activate_bin_path('irb', 'irb', version)
+else
+gem "irb", version
+load Gem.bin_path("irb", "irb", version)
+end
diff --git a/bin/rdoc b/bin/rdoc
index aaa23292dfd1..74e8b025b477 100755
--- a/bin/rdoc
+++ b/bin/rdoc
@@ -1,44 +1,27 @@
 #!/usr/bin/env ruby
 #
-#  RDoc: Documentation tool for source code
-#        (see lib/rdoc/rdoc.rb for more information)
+# This file was generated by RubyGems.
+#
+# The application 'rdoc' is installed as part of a gem, and
+# this file is here to facilitate running it.
 #
-#  Copyright (c) 2003 Dave Thomas
-#  Released under the same terms as Ruby
 
-begin
-  gem 'rdoc'
-rescue NameError => e # --disable-gems
-  raise unless e.name == :gem
-rescue Gem::LoadError
-end
+require 'rubygems'
 
-require 'rdoc/rdoc'
+version = ">= 0.a"
 
-begin
-  r = RDoc::RDoc.new
-  r.document ARGV
-rescue Errno::ENOSPC
-  $stderr.puts 'Ran out of space creating documentation'
-  $stderr.puts
-  $stderr.puts 'Please free up some space and try again'
-rescue SystemExit
-  raise
-rescue Exception => e
-  if $DEBUG_RDOC then
-    $stderr.puts e.message
-    $stderr.puts "#{e.backtrace.join "\n\t"}"
-    $stderr.puts
-  elsif Interrupt === e then
-    $stderr.puts
-    $stderr.puts 'Interrupted'
-  else
-    $stderr.puts "uh-oh! RDoc had a problem:"
-    $stderr.puts e.message
-    $stderr.puts
-    $stderr.puts "run with --debug for full backtrace"
+if ARGV.first
+  str = ARGV.first
+  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
+  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
+    version = $1
+    ARGV.shift
   end
-
-  exit 1
 end
 
+if Gem.respond_to?(:activate_bin_path)
+load Gem.activate_bin_path('rdoc', 'rdoc', version)
+else
+gem "rdoc", version
+load Gem.bin_path("rdoc", "rdoc", version)
+end
diff --git a/bin/ri b/bin/ri
index 7fbed0c09900..eaca302681fe 100755
--- a/bin/ri
+++ b/bin/ri
@@ -1,12 +1,27 @@
 #!/usr/bin/env ruby
+#
+# This file was generated by RubyGems.
+#
+# The application 'rdoc' is installed as part of a gem, and
+# this file is here to facilitate running it.
+#
 
-begin
-  gem 'rdoc'
-rescue NameError => e # --disable-gems
-  raise unless e.name == :gem
-rescue Gem::LoadError
-end
+require 'rubygems'
+
+version = ">= 0.a"
 
-require 'rdoc/ri/driver'
+if ARGV.first
+  str = ARGV.first
+  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
+  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
+    version = $1
+    ARGV.shift
+  end
+end
 
-RDoc::RI::Driver.run ARGV
+if Gem.respond_to?(:activate_bin_path)
+load Gem.activate_bin_path('rdoc', 'ri', version)
+else
+gem "rdoc", version
+load Gem.bin_path("rdoc", "ri", version)
+end
diff --git a/common.mk b/common.mk
index eafa6bbfae16..305f31d519e5 100644
--- a/common.mk
+++ b/common.mk
@@ -542,15 +542,15 @@ post-install-gem::
 
 rdoc: PHONY main
 	@echo Generating RDoc documentation
-	$(Q) $(XRUBY) "$(srcdir)/bin/rdoc" --root "$(srcdir)" --page-dir "$(srcdir)/doc" --encoding=UTF-8 --no-force-update --all --ri --op "$(RDOCOUT)" $(RDOCFLAGS) "$(srcdir)"
+	$(Q) $(XRUBY) "$(srcdir)/libexec/rdoc" --root "$(srcdir)" --page-dir "$(srcdir)/doc" --encoding=UTF-8 --no-force-update --all --ri --op "$(RDOCOUT)" $(RDOCFLAGS) "$(srcdir)"
 
 html: PHONY main
 	@echo Generating RDoc HTML files
-	$(Q) $(XRUBY) "$(srcdir)/bin/rdoc" --root "$(srcdir)" --page-dir "$(srcdir)/doc" --encoding=UTF-8 --no-force-update --all --op "$(HTMLOUT)" $(RDOCFLAGS) "$(srcdir)"
+	$(Q) $(XRUBY) "$(srcdir)/libexec/rdoc" --root "$(srcdir)" --page-dir "$(srcdir)/doc" --encoding=UTF-8 --no-force-update --all --op "$(HTMLOUT)" $(RDOCFLAGS) "$(srcdir)"
 
 rdoc-coverage: PHONY main
 	@echo Generating RDoc coverage report
-	$(Q) $(XRUBY) "$(srcdir)/bin/rdoc" --root "$(srcdir)" --encoding=UTF-8 --all --quiet -C $(RDOCFLAGS) "$(srcdir)"
+	$(Q) $(XRUBY) "$(srcdir)/libexec/rdoc" --root "$(srcdir)" --encoding=UTF-8 --all --quiet -C $(RDOCFLAGS) "$(srcdir)"
 
 RDOCBENCHOUT=/tmp/rdocbench
 
diff --git a/lib/bundler.gemspec b/lib/bundler.gemspec
index 96b9b7861b55..2b2bb412d501 100644
--- a/lib/bundler.gemspec
+++ b/lib/bundler.gemspec
@@ -58,7 +58,7 @@ Gem::Specification.new do |s|
   # include the gemspec itself because warbler breaks w/o it
   s.files += %w[bundler.gemspec]
 
-  # s.bindir        = "exe"
-  # s.executables   = %w[bundle bundler]
+  s.bindir        = "exe"
+  s.executables   = %w[bundle bundler]
   s.require_paths = ["lib"]
 end
diff --git a/libexec/bundle b/libexec/bundle
new file mode 100755
index 000000000000..aaf773745d36
--- /dev/null
+++ b/libexec/bundle
@@ -0,0 +1,31 @@
+#!/usr/bin/env ruby
+# frozen_string_literal: true
+
+# Exit cleanly from an early interrupt
+Signal.trap("INT") do
+  Bundler.ui.debug("\n#{caller.join("\n")}") if defined?(Bundler)
+  exit 1
+end
+
+require "bundler"
+# Check if an older version of bundler is installed
+$LOAD_PATH.each do |path|
+  next unless path =~ %r{/bundler-0\.(\d+)} && $1.to_i < 9
+  err = String.new
+  err << "Looks like you have a version of bundler that's older than 0.9.\n"
+  err << "Please remove your old versions.\n"
+  err << "An easy way to do this is by running `gem cleanup bundler`."
+  abort(err)
+end
+
+require "bundler/friendly_errors"
+Bundler.with_friendly_errors do
+  require "bundler/cli"
+
+  # Allow any command to use --help flag to show help for that command
+  help_flags = %w[--help -h]
+  help_flag_used = ARGV.any? {|a| help_flags.include? a }
+  args = help_flag_used ? Bundler::CLI.reformatted_help_args(ARGV) : ARGV
+
+  Bundler::CLI.start(args, :debug => true)
+end
diff --git a/libexec/bundle_ruby b/libexec/bundle_ruby
new file mode 100755
index 000000000000..2209c6195f8c
--- /dev/null
+++ b/libexec/bundle_ruby
@@ -0,0 +1,60 @@
+#!/usr/bin/env ruby
+# frozen_string_literal: true
+
+require "bundler/shared_helpers"
+
+Bundler::SharedHelpers.major_deprecation(3, "the bundle_ruby executable has been removed in favor of `bundle platform --ruby`")
+
+Signal.trap("INT") { exit 1 }
+
+require "bundler/errors"
+require "bundler/ruby_version"
+require "bundler/ruby_dsl"
+
+module Bundler
+  class Dsl
+    include RubyDsl
+
+    attr_accessor :ruby_version
+
+    def initialize
+      @ruby_version = nil
+    end
+
+    def eval_gemfile(gemfile, contents = nil)
+      contents ||= File.open(gemfile, "rb", &:read)
+      instance_eval(contents, gemfile.to_s, 1)
+    rescue SyntaxError => e
+      bt = e.message.split("\n")[1..-1]
+      raise GemfileError, ["Gemfile syntax error:", *bt].join("\n")
+    rescue ScriptError, RegexpError, NameError, ArgumentError => e
+      e.backtrace[0] = "#{e.backtrace[0]}: #{e.message} (#{e.class})"
+      STDERR.puts e.backtrace.join("\n       ")
+      raise GemfileError, "There was an error in your Gemfile," \
+        " and Bundler cannot continue."
+    end
+
+    def source(source, options = {})
+    end
+
+    def gem(name, *args)
+    end
+
+    def group(*args)
+    end
+  end
+end
+
+dsl = Bundler::Dsl.new
+begin
+  dsl.eval_gemfile(Bundler::SharedHelpers.default_gemfile)
+  ruby_version = dsl.ruby_version
+  if ruby_version
+    puts ruby_version
+  else
+    puts "No ruby version specified"
+  end
+rescue Bundler::GemfileError => e
+  puts e.message
+  exit(-1)
+end
diff --git a/libexec/bundler b/libexec/bundler
new file mode 100755
index 000000000000..d9131fe834b8
--- /dev/null
+++ b/libexec/bundler
@@ -0,0 +1,4 @@
+#!/usr/bin/env ruby
+# frozen_string_literal: true
+
+load File.expand_path("../bundle", __FILE__)
diff --git a/libexec/irb b/libexec/irb
new file mode 100755
index 000000000000..c64ee85fbdcd
--- /dev/null
+++ b/libexec/irb
@@ -0,0 +1,11 @@
+#!/usr/bin/env ruby
+#
+#   irb.rb - interactive ruby
+#   	$Release Version: 0.9.6 $
+#   	$Revision$
+#   	by Keiju ISHITSUKA(keiju@ruby-lang.org)
+#
+
+require "irb"
+
+IRB.start(__FILE__)
diff --git a/libexec/rdoc b/libexec/rdoc
new file mode 100755
index 000000000000..aaa23292dfd1
--- /dev/null
+++ b/libexec/rdoc
@@ -0,0 +1,44 @@
+#!/usr/bin/env ruby
+#
+#  RDoc: Documentation tool for source code
+#        (see lib/rdoc/rdoc.rb for more information)
+#
+#  Copyright (c) 2003 Dave Thomas
+#  Released under the same terms as Ruby
+
+begin
+  gem 'rdoc'
+rescue NameError => e # --disable-gems
+  raise unless e.name == :gem
+rescue Gem::LoadError
+end
+
+require 'rdoc/rdoc'
+
+begin
+  r = RDoc::RDoc.new
+  r.document ARGV
+rescue Errno::ENOSPC
+  $stderr.puts 'Ran out of space creating documentation'
+  $stderr.puts
+  $stderr.puts 'Please free up some space and try again'
+rescue SystemExit
+  raise
+rescue Exception => e
+  if $DEBUG_RDOC then
+    $stderr.puts e.message
+    $stderr.puts "#{e.backtrace.join "\n\t"}"
+    $stderr.puts
+  elsif Interrupt === e then
+    $stderr.puts
+    $stderr.puts 'Interrupted'
+  else
+    $stderr.puts "uh-oh! RDoc had a problem:"
+    $stderr.puts e.message
+    $stderr.puts
+    $stderr.puts "run with --debug for full backtrace"
+  end
+
+  exit 1
+end
+
diff --git a/libexec/ri b/libexec/ri
new file mode 100755
index 000000000000..7fbed0c09900
--- /dev/null
+++ b/libexec/ri
@@ -0,0 +1,12 @@
+#!/usr/bin/env ruby
+
+begin
+  gem 'rdoc'
+rescue NameError => e # --disable-gems
+  raise unless e.name == :gem
+rescue Gem::LoadError
+end
+
+require 'rdoc/ri/driver'
+
+RDoc::RI::Driver.run ARGV
diff --git a/tool/rbinstall.rb b/tool/rbinstall.rb
index b448e62d079d..13a897cdc5c0 100755
--- a/tool/rbinstall.rb
+++ b/tool/rbinstall.rb
@@ -781,7 +781,7 @@ def install_default_gem(dir, srcdir)
       makedirs(bin_dir)
 
       gemspec.executables.map {|exec|
-        $script_installer.install(File.join(srcdir, 'bin', exec),
+        $script_installer.install(File.join(srcdir, 'libexec', exec),
                                   File.join(bin_dir, exec))
       }
     end
