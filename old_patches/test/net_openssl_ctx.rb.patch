Patch by MSP-Greg
Add shared utils_ssl.rb file with create_ssl_ctx method
Removes duplicated code in ftp, imap, & smtp
diff --git a/test/net/ftp/test_ftp.rb b/test/net/ftp/test_ftp.rb
index 2504a48d0a..24d43b7c90 100644
--- a/test/net/ftp/test_ftp.rb
+++ b/test/net/ftp/test_ftp.rb
@@ -6,8 +6,11 @@
 require "stringio"
 require "tempfile"
 require "tmpdir"
+require File.expand_path('..\utils_ssl', File.dirname(__FILE__))
 
 class FTPTest < Test::Unit::TestCase
+  include TestNetUtilsSSL
+
   SERVER_NAME = "localhost"
   SERVER_ADDR =
     begin
@@ -15,9 +18,6 @@ class FTPTest < Test::Unit::TestCase
     rescue SocketError
       "127.0.0.1"
     end
-  CA_FILE = File.expand_path("../fixtures/cacert.pem", __dir__)
-  SERVER_KEY = File.expand_path("../fixtures/server.key", __dir__)
-  SERVER_CERT = File.expand_path("../fixtures/server.crt", __dir__)
 
   def setup
     @thread = nil
@@ -1862,14 +1862,7 @@ def test_active_private_data_connection
           sock.print("220 (test_ftp).\r\n")
           commands.push(sock.gets)
           sock.print("234 AUTH success.\r\n")
-          ctx = OpenSSL::SSL::SSLContext.new
-          ctx.ca_file = CA_FILE
-          ctx.key = File.open(SERVER_KEY) { |f|
-            OpenSSL::PKey::RSA.new(f)
-          }
-          ctx.cert = File.open(SERVER_CERT) { |f|
-            OpenSSL::X509::Certificate.new(f)
-          }
+          ctx = create_ctx
           sock = OpenSSL::SSL::SSLSocket.new(sock, ctx)
           sock.sync_close = true
           begin
@@ -1946,14 +1939,7 @@ def test_passive_private_data_connection
           sock.print("220 (test_ftp).\r\n")
           commands.push(sock.gets)
           sock.print("234 AUTH success.\r\n")
-          ctx = OpenSSL::SSL::SSLContext.new
-          ctx.ca_file = CA_FILE
-          ctx.key = File.open(SERVER_KEY) { |f|
-            OpenSSL::PKey::RSA.new(f)
-          }
-          ctx.cert = File.open(SERVER_CERT) { |f|
-            OpenSSL::X509::Certificate.new(f)
-          }
+          ctx = create_ctx
           sock = OpenSSL::SSL::SSLSocket.new(sock, ctx)
           sock.sync_close = true
           begin
@@ -2028,14 +2014,7 @@ def test_active_clear_data_connection
           sock.print("220 (test_ftp).\r\n")
           commands.push(sock.gets)
           sock.print("234 AUTH success.\r\n")
-          ctx = OpenSSL::SSL::SSLContext.new
-          ctx.ca_file = CA_FILE
-          ctx.key = File.open(SERVER_KEY) { |f|
-            OpenSSL::PKey::RSA.new(f)
-          }
-          ctx.cert = File.open(SERVER_CERT) { |f|
-            OpenSSL::X509::Certificate.new(f)
-          }
+          ctx = create_ctx
           sock = OpenSSL::SSL::SSLSocket.new(sock, ctx)
           sock.sync_close = true
           begin
@@ -2097,14 +2076,7 @@ def test_passive_clear_data_connection
           sock.print("220 (test_ftp).\r\n")
           commands.push(sock.gets)
           sock.print("234 AUTH success.\r\n")
-          ctx = OpenSSL::SSL::SSLContext.new
-          ctx.ca_file = CA_FILE
-          ctx.key = File.open(SERVER_KEY) { |f|
-            OpenSSL::PKey::RSA.new(f)
-          }
-          ctx.cert = File.open(SERVER_CERT) { |f|
-            OpenSSL::X509::Certificate.new(f)
-          }
+          ctx = create_ctx
           sock = OpenSSL::SSL::SSLSocket.new(sock, ctx)
           sock.sync_close = true
           begin
@@ -2189,14 +2161,7 @@ def test_abort_tls
       sock.print("220 (test_ftp).\r\n")
       commands.push(sock.gets)
       sock.print("234 AUTH success.\r\n")
-      ctx = OpenSSL::SSL::SSLContext.new
-      ctx.ca_file = CA_FILE
-      ctx.key = File.open(SERVER_KEY) { |f|
-        OpenSSL::PKey::RSA.new(f)
-      }
-      ctx.cert = File.open(SERVER_CERT) { |f|
-        OpenSSL::X509::Certificate.new(f)
-      }
+      ctx = create_ctx
       sock = OpenSSL::SSL::SSLSocket.new(sock, ctx)
       sock.sync_close = true
       sock.accept
@@ -2493,14 +2458,7 @@ def tls_test
         sock.print("220 (test_ftp).\r\n")
         commands.push(sock.gets)
         sock.print("234 AUTH success.\r\n")
-        ctx = OpenSSL::SSL::SSLContext.new
-        ctx.ca_file = CA_FILE
-        ctx.key = File.open(SERVER_KEY) { |f|
-          OpenSSL::PKey::RSA.new(f)
-        }
-        ctx.cert = File.open(SERVER_CERT) { |f|
-          OpenSSL::X509::Certificate.new(f)
-        }
+        ctx = create_ctx
         sock = OpenSSL::SSL::SSLSocket.new(sock, ctx)
         sock.sync_close = true
         begin
diff --git a/test/net/http/test_https.rb b/test/net/http/test_https.rb
index 64101b6bda..8140bd2b07 100644
--- a/test/net/http/test_https.rb
+++ b/test/net/http/test_https.rb
@@ -4,23 +4,15 @@
   require 'net/https'
   require 'stringio'
   require 'timeout'
-  require File.expand_path("utils", File.dirname(__FILE__))
+  require File.expand_path("utils", __dir__)
+  require File.expand_path('..\utils_ssl', File.dirname(__FILE__))
 rescue LoadError
   # should skip this test
 end
 
 class TestNetHTTPS < Test::Unit::TestCase
   include TestNetHTTPUtils
-
-  def self.read_fixture(key)
-    File.read(File.expand_path("../fixtures/#{key}", __dir__))
-  end
-
-  CA_CERT = OpenSSL::X509::Certificate.new(read_fixture("cacert.pem"))
-  SERVER_KEY = OpenSSL::PKey.read(read_fixture("server.key"))
-  SERVER_CERT = OpenSSL::X509::Certificate.new(read_fixture("server.crt"))
-  DHPARAMS = OpenSSL::PKey::DH.new(read_fixture("dhparams.pem"))
-  TEST_STORE = OpenSSL::X509::Store.new.tap {|s| s.add_cert(CA_CERT) }
+  include TestNetUtilsSSL
 
   CONFIG = {
     'host' => '127.0.0.1',
@@ -141,6 +133,7 @@ def test_session_reuse
 
     http = Net::HTTP.new("localhost", config("port"))
     http.use_ssl = true
+    http.max_version = OpenSSL::SSL::TLS1_2_VERSION
     http.cert_store = TEST_STORE
 
     http.start
diff --git a/test/net/imap/test_imap.rb b/test/net/imap/test_imap.rb
index 6c6a657552..df104ef44e 100644
--- a/test/net/imap/test_imap.rb
+++ b/test/net/imap/test_imap.rb
@@ -2,11 +2,10 @@
 
 require "net/imap"
 require "test/unit"
+require File.expand_path('..\utils_ssl', File.dirname(__FILE__))
 
 class IMAPTest < Test::Unit::TestCase
-  CA_FILE = File.expand_path("../fixtures/cacert.pem", __dir__)
-  SERVER_KEY = File.expand_path("../fixtures/server.key", __dir__)
-  SERVER_CERT = File.expand_path("../fixtures/server.crt", __dir__)
+  include TestNetUtilsSSL
 
   def setup
     @do_not_reverse_lookup = Socket.do_not_reverse_lookup
@@ -757,14 +756,7 @@ def test_append_fail
   def imaps_test
     server = create_tcp_server
     port = server.addr[1]
-    ctx = OpenSSL::SSL::SSLContext.new
-    ctx.ca_file = CA_FILE
-    ctx.key = File.open(SERVER_KEY) { |f|
-      OpenSSL::PKey::RSA.new(f)
-    }
-    ctx.cert = File.open(SERVER_CERT) { |f|
-      OpenSSL::X509::Certificate.new(f)
-    }
+    ctx = create_ctx
     ssl_server = OpenSSL::SSL::SSLServer.new(server, ctx)
     started = false
     ths = Thread.start do
@@ -806,14 +798,7 @@ def starttls_test
         sock.print("* OK test server\r\n")
         sock.gets
         sock.print("RUBY0001 OK completed\r\n")
-        ctx = OpenSSL::SSL::SSLContext.new
-        ctx.ca_file = CA_FILE
-        ctx.key = File.open(SERVER_KEY) { |f|
-          OpenSSL::PKey::RSA.new(f)
-        }
-        ctx.cert = File.open(SERVER_CERT) { |f|
-          OpenSSL::X509::Certificate.new(f)
-        }
+        ctx = create_ctx
         sock = OpenSSL::SSL::SSLSocket.new(sock, ctx)
         sock.sync_close = true
         sock.accept
diff --git a/test/net/smtp/test_smtp.rb b/test/net/smtp/test_smtp.rb
index 90c92e06f8..70f2575d5e 100644
--- a/test/net/smtp/test_smtp.rb
+++ b/test/net/smtp/test_smtp.rb
@@ -2,12 +2,11 @@
 require 'net/smtp'
 require 'stringio'
 require 'test/unit'
+require File.expand_path('..\utils_ssl', File.dirname(__FILE__))
 
 module Net
   class TestSMTP < Test::Unit::TestCase
-    CA_FILE = File.expand_path("../fixtures/cacert.pem", __dir__)
-    SERVER_KEY = File.expand_path("../fixtures/server.key", __dir__)
-    SERVER_CERT = File.expand_path("../fixtures/server.crt", __dir__)
+    include TestNetUtilsSSL
 
     class FakeSocket
       attr_reader :write_io
@@ -105,14 +104,7 @@ def test_crlf_injection
 
     def test_tls_connect
       servers = Socket.tcp_server_sockets("localhost", 0)
-      ctx = OpenSSL::SSL::SSLContext.new
-      ctx.ca_file = CA_FILE
-      ctx.key = File.open(SERVER_KEY) { |f|
-        OpenSSL::PKey::RSA.new(f)
-      }
-      ctx.cert = File.open(SERVER_CERT) { |f|
-        OpenSSL::X509::Certificate.new(f)
-      }
+      ctx = create_ctx
       begin
         sock = nil
         Thread.start do
diff --git a/test/net/utils_ssl.rb b/test/net/utils_ssl.rb
new file mode 100644
index 0000000000..81e7f082e7
--- /dev/null
+++ b/test/net/utils_ssl.rb
@@ -0,0 +1,23 @@
+# frozen_string_literal: true
+
+module TestNetUtilsSSL
+
+  def self.fixture(fn)
+    File.read File.expand_path("fixtures/#{fn}", __dir__)
+  end
+
+  CA_FILE = File.expand_path("fixtures/cacert.pem", __dir__)
+  CA_CERT     = OpenSSL::X509::Certificate.new fixture("cacert.pem")
+  SERVER_KEY  = OpenSSL::PKey.read fixture("server.key")
+  SERVER_CERT = OpenSSL::X509::Certificate.new fixture("server.crt")
+  DHPARAMS    = OpenSSL::PKey::DH.new fixture("dhparams.pem")
+  TEST_STORE  = OpenSSL::X509::Store.new.tap {|s| s.add_cert(CA_CERT) }
+
+  def create_ctx
+    ctx = OpenSSL::SSL::SSLContext.new
+    ctx.ca_file = CA_FILE
+    ctx.key  = SERVER_KEY
+    ctx.cert = SERVER_CERT
+    ctx
+  end
+end
